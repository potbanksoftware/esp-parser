#!/usr/bin/env python3
#
#  __main__.py
"""
Command-line too to output a representation of an ESP file as text or Python source code.
"""
#
#  Copyright Â© 2024 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
#  OR OTHER DEALINGS IN THE SOFTWARE.
#

# stdlib
import sys
from typing import TYPE_CHECKING, Optional, Union, cast

# 3rd party
import click
from consolekit import click_command
from consolekit.options import flag_option

# this package
import esp_parser

if TYPE_CHECKING:
	# 3rd party
	from domdf_python_tools.paths import PathPlus

__all__ = ["main"]


def python_docstring_for_filename(esp_file: "PathPlus") -> str:
	return f"# Generated by esp-parser {esp_parser.__version__} from {esp_file.name}\n\n"


def dump_to_modules(esp_file: "PathPlus", output_file: Union["PathPlus", str, None] = None) -> None:
	# stdlib
	from io import BytesIO
	from typing import cast

	# 3rd party
	from domdf_python_tools.paths import PathPlus
	from domdf_python_tools.stringlist import StringList

	# this package
	import esp_parser
	from esp_parser.group import Group
	from esp_parser.output import records_as_python, reformat
	from esp_parser.records import TES4
	from esp_parser.types import RecordType

	plugin_name = esp_file.stem

	output_dir: PathPlus
	if output_file:
		output_dir = PathPlus(output_file).with_suffix('')
	else:
		output_dir = PathPlus(plugin_name)

	output_dir.maybe_make()

	with esp_file.open("rb") as fp:
		records = esp_parser.parse_esp(cast(BytesIO, fp))
		docstring = python_docstring_for_filename(esp_file)
		submodules = []

		record: RecordType
		for record in records:
			if isinstance(record, TES4):
				record_output_file = output_dir / "TES4.py"
			else:
				assert isinstance(record, Group)
				record_output_file = output_dir / f"{record.label.decode()}.py"

			if not record_output_file.exists():
				output = docstring + records_as_python([record], f"create_{record_output_file.stem.lower()}")
				reformatted_output = reformat(output, record_output_file)
				record_output_file.write_text(reformatted_output)

			submodules.append(record_output_file.stem)

		init_file_source = StringList([docstring])
		init_file_source.blankline()

		for submodule in submodules:
			init_file_source.append(f"from .{submodule} import create_{submodule.lower()}")

		init_file_source.append(f"def {plugin_name}():")
		init_file_source.append("\treturn [", )

		for submodule in submodules:
			init_file_source.append(f"\t\t*create_{submodule.lower()}(),", )

		init_file_source.append("\t]", )

		(output_dir / "__init__.py").write_text(reformat(str(init_file_source), (output_dir / "__init__.py")))


@flag_option("-m", "--python-modules", help="Output as Python modules (one file per record type).")
@flag_option("-p", "--python", help="Output as a Python function.")
@click.argument("OUTPUT_FILE", required=False, default=None)
@click.argument("ESP_FILE")
@click_command()
def main(
		esp_file: str,
		output_file: Optional[str] = None,
		python: bool = False,
		python_modules: bool = False,
		) -> None:
	"""
	Output a representation of an ESP file as text or Python source code.
	"""

	# stdlib
	from io import BytesIO

	# 3rd party
	from domdf_python_tools.paths import PathPlus

	# this package
	import esp_parser
	from esp_parser.output import records_as_python, records_as_text, reformat

	filename = PathPlus(esp_file)

	if python_modules:
		dump_to_modules(filename, output_file)
		sys.exit(0)

	plugin_name = filename.stem

	with filename.open("rb") as fp:
		records = esp_parser.parse_esp(cast(BytesIO, fp))

		if python:
			output = python_docstring_for_filename(filename) + records_as_python(records, plugin_name)
			if output_file is None:
				output_file = f"{plugin_name}.py"
		else:
			output = records_as_text(records)
			if output_file is None:
				output_file = f"{plugin_name}.txt"

	# TODO: reformat line-by-line in parallel
	reformatted_output = reformat(output, output_file)

	assert output_file is not None

	if output_file == '-':
		print(reformatted_output)
	else:
		with open(output_file, 'w', encoding="UTF-8") as fp:
			fp.write(reformatted_output)


if __name__ == "__main__":
	main()
